model "assort_packing_distribution_model"
uses "mmxprs"

filename:='data.txt'
declarations
    I: integer ! number of items
    S: integer ! number of stores
    R: integer ! number of configuration set
    N: integer ! maximum number of configurations using for packing
    M: integer ! maximum number of box
end-declarations

initializations from filename
    I S R N M
end-initializations

declarations
    Items = 1..I
    Stores = 1..S
    Configurations = 1..R
    C: array(Configurations,Items) of real ! the number of items in each configuration
    Demand: array(Items,Stores) of real
    Productions: array(Items) of real

    ! variables
    Distribution: array(Configurations,Stores) of mpvar !
    Overshipment: array(Items,Stores) of mpvar
    Undershipment: array(Items,Stores) of mpvar
    Selection: array(Configurations) of mpvar ! Binary variable using to indicate whether
                                        ! a box configuration is selected (Z)
end-declarations

initializations from filename
    C Productions Demand
end-initializations

forall(c in Configurations, s in Stores) Distribution(c,s) is_integer
forall(c in Configurations) Selection(c) is_binary


!objective function
objective:= sum(s in Stores, i in Items) (Overshipment(i,s) + Undershipment(i,s))

Over_total:= sum(s in Stores, i in Items) Overshipment(i,s)
Under_total:= sum(s in Stores, i in Items) Undershipment(i,s)


!constraints

!The relationship among real distribution and overshipment and undershipment
forall(i in Items, s in Stores) do
    (sum(r in Configurations) C(r,i)*Distribution(r,s)-Overshipment(i,s)+Undershipment(i,s)) = Demand(i,s)
end-do

!Limite the total number of configuration
sum(r in Configurations)Selection(r) <= N

!Limite the total number of boxes
sum(r in Configurations, s in Stores)Distribution(r,s) <= M

!Each store receive at least one box
forall(s in Stores) do
    sum(r in Configurations)Distribution(r,s) >= 1
end-do

!The total number of distribution is less or equal to production
forall(i in Items) do
    sum(r in Configurations, s in Stores)C(r,i)*Distribution(r,s) <= Productions(i)
end-do

!Once the configuration is selected, the box with the corresponding configuration can be sent to stores
forall(r in Configurations) do
    sum(s in Stores) Distribution(r,s) <= M*Selection(r)
end-do

!At least one box under the selected configuration should be sent to a store
forall(r in Configurations)do
    sum(s in Stores) Distribution(r,s) >= Selection(r)
end-do


minimise(Over_total+Under_total)

writeln("total: ",getobjval)
writeln("overshipment: ", getsol(Over_total))
writeln("undershipment: ", getsol(Under_total))

end-model






















































